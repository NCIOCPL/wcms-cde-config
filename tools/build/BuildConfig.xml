<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Help"  xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Import required targets and configuration items. -->
  <Import Project="bin\MSBuild.Community.Tasks.Targets"/>
  <Import Project="build.config"/>


  <!--
    Determine directory tree from values passed in at runtime

	$(WORKSPACE) - directory containing the source code.
	$(TEMPBASE) - Base path for temporary files (build output)
	$(BUILD_NUMBER) - Build number (generated by Jenkins)


	Calculated properites are
      $(SourceLocation) - Location of source files.
      $(OutputFolder) - Holding bin for compiled binaries.
      $(StagingLocation) - Copy of all files to be deployed.
	    $(ConfigFileLocation) - Location for generating configuration files.

  -->
  <PropertyGroup>
    <SourceLocation>$(Workspace)</SourceLocation>

	  <TempBase>$(TEMP)\Build-$(BUILD_NUMBER)-config</TempBase>
	  <OutputFolder>$(TempBase)\output\</OutputFolder>
    <StagingLocation>$(TempBase)\staging</StagingLocation>
	  <ConfigFileLocation>$(StagingLocation)\_configFiles</ConfigFileLocation>

	  <BuildName>cde-$([System.DateTime]::Now.ToString(yyyy-MM-dd))-$(branch)-$(TargetEnvironment)-$(BUILD_NUMBER)</BuildName>
  </PropertyGroup>


  <!--
    Build the solution and copy only the necessary files to the staging folder.
  -->
  <Target Name="Build">

    <!-- Clean up old output locations. -->
    <RemoveDir Directories="$(StagingLocation)" />
    <RemoveDir Directories="$(OutputFolder)" />
	  <RemoveDir Directories="$(ConfigFileLocation)" />

	<!--
		Similar to the build, we want to execute the ConfigTransform target multiple times, with varying
		combinations of CDE sites, environments, and preview/live.
	-->

    <Exec Command="for %%a in ($(CDE_Site_List)) do for %%b in ($(Config_Environment_List)) do for %%c in ($(Config_Site_List)) do msbuild buildConfigInner.xml /nologo /t:ConfigTransform &quot;/p:CDE_Site=%%a;ENVIRON=%%b;SITE=%%c;ConfigFileLocation=$(ConfigFileLocation);SourceLocation=$(SourceLocation);Revision=$(Revision);TargetEnvironment=$(TargetEnvironment);Branch=$(Branch);SubstitutionList=$(SUBSTITUTION_FILE)&quot;" />

    <Copy	SourceFiles="resources\configDeploy.bat"		DestinationFolder="$(StagingLocation)"		OverwriteReadOnlyFiles="true" />
  	<Copy	SourceFiles="resources\configDeploy.ps1"		DestinationFolder="$(StagingLocation)"		OverwriteReadOnlyFiles="true" />
	<Copy	SourceFiles="resources\configBackup.ps1"		DestinationFolder="$(StagingLocation)"		OverwriteReadOnlyFiles="true" />

  </Target>

  <!--
	Create a ZIP file containing the build artifacts (configs) and upload it to Nexus repo.
  -->
  <Target Name="Upload" DependsOnTargets="ValidateProps">

      <!-- Create tags in the local repository and on GitHub -->
  	  <Message Text="Creating tag $(BuildName)." />
  	  <Exec Command="git tag $(BuildName) $(CONFIG_COMMIT_ID)" />
  	  <Exec Command="powershell -ExecutionPolicy Unrestricted -NonInteractive build-tools\github-tools\github-release.ps1 -tagname $(BuildName) -releaseName $(BuildName) -commitId $(CONFIG_COMMIT_ID) -IsPreRelease -releaseNotes \&quot;Automated build $(BuildName)\&quot; -gitHubUsername $(GH_ORGANIZATION_NAME) -gitHubRepository $(GH_REPO_NAME)" />

      <!-- Create ZIP file of built configuration files. -->
      <Message Text="Creating $(TempBase)\$(BuildName).zip from $(StagingLocation)" />
      <Exec Command="powershell -ExecutionPolicy Unrestricted -NonInteractive build-tools\zip-tools\create-zip.ps1 -sourcePath &quot;$(StagingLocation)\*&quot;  -destinationPath &quot;$(TempBase)\$(BuildName).zip&quot;" />

      <!-- Upload built files to the Nexus repository -->
      <Message Text="Uploading $(BuildName)-$(CDE_COMMIT_ID).zip to Nexus repository" />
      <Exec Command="powershell -ExecutionPolicy Unrestricted -NonInteractive build-tools\nexus-tools\nexus-upload.ps1 -Filename $(BuildName).zip -LocalDir $(TempBase) -RemoteFilename $(BuildName)-$(CDE_COMMIT_ID).zip -UserID $(NEXUS_USER) -UserPass $(NEXUS_PASS)" />

  </Target>

  <!--
	Clean up after the build is complete.
  -->
  <Target Name="Cleanup">
    <Message Text="Cleaning up $(TempBase)" />
	  <RemoveDir Directories="$(TempBase)" />
  </Target>

  <!--
    Deploy the built code (.as?x and .dll) to the location set in
    the $(DeployLocation) value, defined in build.config.  (If the
    value is not defined, this step will be skipped.)
  -->
  <Target Name="ConfigDeploy" Condition="$(DeployLocation) != ''">

    <!--
        A given target can only be run once. We need to deploy multiple sites, so use a command shell
        to run a series of deploy operations.  See the Build target for addtional information
    -->
    <!--
    <Exec IgnoreExitCode="true" Command="for %%a in ($(CDE_Site_List)) do msbuild buildConfigInner.xml /t:Deploy /p:CDE_Site=%%a /p:StagingLocation=$(StagingLocation) /p:TargetEnvironment=$(TargetEnvironment) /p:ConfigFileLocation=$(ConfigFileLocation)" />
    -->
  </Target>



  <!-- This target validates properties that are expected to be passed into msbuild -->
  <Target Name="ValidateProps">
    <Error Condition=" '$(TargetEnvironment)'=='' "
            Text=" Missing required property [TargetEnvironment]" />

    <Error Condition=" '$(Branch)'=='' "
            Text=" Missing required property [Branch]" />

    <Error Condition=" '$(CDE_COMMIT_ID)'=='' "
            Text=" Missing required property [CDE_COMMIT_ID]" />

    <Error Condition=" '$(CONFIG_COMMIT_ID)'=='' "
            Text=" Missing required property [CONFIG_COMMIT_ID]" />

    <Error Condition=" '$(GITHUB_TOKEN)'=='' "
            Text=" Missing required property [GITHUB_TOKEN]" />

    <Error Condition=" '$(BUILD_NUMBER)'=='' "
            Text=" Missing required property [BUILD_NUMBER]" />

    <Error Condition=" '$(NEXUS_USER)'=='' "
            Text=" Missing required property [NEXUS_USER]" />

    <Error Condition=" '$(NEXUS_PASS)'=='' "
            Text=" Missing required property [NEXUS_PASS]" />

    <Error Condition=" '$(SUBSTITUTION_FILE)'=='' "
            Text=" Missing required property [SUBSTITUTION_FILE]" />

    <Error Condition=" '$(GH_ORGANIZATION_NAME)'=='' "
            Text=" Missing required property [GH_ORGANIZATION_NAME]" />

    <Error Condition=" '$(GH_REPO_NAME)'=='' "
            Text=" Missing required property [GH_REPO_NAME]" />

  <!-- We need some sort of Nexus token/login -->

  </Target>

  <!--
    The "main" target which defines the list and order of other
    targets to be run.
  -->
  <Target Name="All" DependsOnTargets="ValidateProps">

	<Message Text="Building Branch: $(Branch) for target $(TargetEnvironment)" />

    <CallTarget Targets="Build"/>
    <!-- Upload for this would be to upload in nexus -->
	  <CallTarget Targets="Upload"/>
    <CallTarget Targets="Cleanup"/>

	</Target>

  <Target Name="Help">
    <Message Text=" " />
    <Message Text="This is the CDE Config Build script" />
    <Message Text=" " />
    <Message Text="To run this script, enter the command:" />
    <Message Text=" " />
    <Message Text="  msbuild BuildConfig.xml /target:All /p:TargetEnvironment=%BuildEnvironment%;Branch=%BranchName%" />
    <Message Text="                BuildEnvironment - The system being used for the build." />
    <Message Text="                BranchName - The branch being built." />
	<Message Text=" " />
    <Message Text="            The WORKSPACE,TEMP,CDE_COMMIT_ID,CONFIG_COMMIT_ID,GITHUB_TOKEN,SUBSTITUTION_FILE and BUILD_NUMBER environment variables must also be set." />
    <Message Text=" " />
  </Target>

</Project>
